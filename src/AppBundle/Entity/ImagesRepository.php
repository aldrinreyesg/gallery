<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\Exception\UniqueConstraintViolationException;
use AppBundle\Entity\Images;
use Carbon\Carbon;
/**
 * ImagesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImagesRepository extends EntityRepository
{
	public function sortByName(){
		$repository = $this->getDoctrine()->getRepository(Images::class);
        return $repository->findBy(array(), array('title' => 'ASC'));
	}

	public function sortByNameValid(){
		$repository = $this->getDoctrine()->getRepository(Images::class);
        $q = $repository->createQueryBuilder('i')
        		->where('i.valid = true')
        		->orderBy('i.title', 'ASC')
        		->getQuery();

        return $q->getResult();
	}

	public function delete($id){
		$em = $this->getDoctrine()->getManager();
		$img = $em->getRepository(Images::class)->find($id);
		if($img){
			$em->remove($img);
			$em->flush();
			return true;
		}
		return false;
	}

	public function cleanImages(){
		$em = $this->getDoctrine()->getManager();
		$q = $em->createQuery('delete from AppBundle\Entity\Images');
		$q->execute();
		return true;
	}

	public function get($id){
		$em = $this->getDoctrine()->getManager();
		$img = $em->getRepository(Images::class)->find($id);
		if($img){
			return $img;
		}else{
			return false;
		}
	}

	public function getFilesName(){
		$repository = $this->getDoctrine()->getRepository(Images::class);
        $q = $repository->createQueryBuilder('i')
        		->select('i.image_name')
        		->getQuery();

        return $q->getResult();
	}
	public function getImgFileName($id){
		$repository = $this->getDoctrine()->getRepository(Images::class);
        $q = $repository->createQueryBuilder('i')
        		->select('i.image_name')
        		->where('i.id = '.$id)
        		->getQuery();

        return $q->getResult();
	}
	public function aprove($id){
		$em = $this->getDoctrine()->getManager();
		$img = $em->getRepository(Images::class)->find($id);
		if($img){
			$valid = $img->getValid();
			$img->setValid(!$valid);
			$em->flush();		
			return true;
		}
		return false;
	}
	public function add($title, $description, $url, $valid, $newName){
		try {
			$em = $this->getDoctrine()->getManager();
			
	        $image=new Images();
	        $image->setTitle($title);
	        $image->setDescription($description);
	        $image->setImage_url($url);
	        $image->setImage_name($newName);
	        $image->setCreated(Carbon::now());
	        $image->setValid($valid);
        
        	$em->persist($image);
           	$em->flush();
        }
        catch (\Doctrine\DBAL\DBALException $e) {
        	return false;
        }
        catch (\Doctrine\ORM\ORMException $e) {
        	return false;
        }

        return true;
	}
}
